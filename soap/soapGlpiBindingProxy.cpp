/* soapGlpiBindingProxy.cpp
   Generated by gSOAP 2.8.49 for glpi.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapGlpiBindingProxy.h"

GlpiBindingProxy::GlpiBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	GlpiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

GlpiBindingProxy::GlpiBindingProxy(const GlpiBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

GlpiBindingProxy::GlpiBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	GlpiBindingProxy_init(_soap->imode, _soap->omode);
}

GlpiBindingProxy::GlpiBindingProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	GlpiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

GlpiBindingProxy::GlpiBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	GlpiBindingProxy_init(iomode, iomode);
}

GlpiBindingProxy::GlpiBindingProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	GlpiBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

GlpiBindingProxy::GlpiBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	GlpiBindingProxy_init(imode, omode);
}

GlpiBindingProxy::~GlpiBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void GlpiBindingProxy::GlpiBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://xml.apache.org/xml-soap", NULL, NULL},
        {"Anything", "http://192.168.1.135/glpi/plugins/webservices/soap.php", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
GlpiBindingProxy *GlpiBindingProxy::copy()
{	GlpiBindingProxy *dup = SOAP_NEW_COPY(GlpiBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

GlpiBindingProxy& GlpiBindingProxy::operator=(const GlpiBindingProxy& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
		this->soap_endpoint = rhs.soap_endpoint;
	}
	return *this;
}

void GlpiBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void GlpiBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	GlpiBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void GlpiBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

::SOAP_ENV__Header *GlpiBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *GlpiBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *GlpiBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *GlpiBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int GlpiBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int GlpiBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void GlpiBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void GlpiBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *GlpiBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int GlpiBindingProxy::genericExecute(const char *endpoint, const char *soap_action, _Anything__genericExecute *Anything__genericExecute, _Anything__genericExecuteResponse &Anything__genericExecuteResponse)
{	struct soap *soap = this->soap;
	struct __Anything__genericExecute soap_tmp___Anything__genericExecute;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://192.168.1.135/glpi/plugins/webservices/soap.php";
	if (soap_action == NULL)
		soap_action = "http://192.168.1.135/glpi/plugins/webservices/soap.php#genericExecute";
	soap_tmp___Anything__genericExecute.Anything__genericExecute = Anything__genericExecute;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___Anything__genericExecute(soap, &soap_tmp___Anything__genericExecute);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___Anything__genericExecute(soap, &soap_tmp___Anything__genericExecute, "-Anything:genericExecute", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___Anything__genericExecute(soap, &soap_tmp___Anything__genericExecute, "-Anything:genericExecute", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_Anything__genericExecuteResponse*>(&Anything__genericExecuteResponse)) // NULL ref?
		return soap_closesock(soap);
	Anything__genericExecuteResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	Anything__genericExecuteResponse.soap_get(soap, "Anything:genericExecuteResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
