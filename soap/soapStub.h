/* soapStub.h
   Generated by gSOAP 2.8.49 for glpi.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#define SOAP_NAMESPACE_OF_ns1	"http://xml.apache.org/xml-soap"
#define SOAP_NAMESPACE_OF_Anything	"http://192.168.1.135/glpi/plugins/webservices/soap.php"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20849
# error "GSOAP VERSION 20849 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__anyType;	/* glpi.h:135 */
class _ns1__AMapType_item;	/* glpi.h:229 */
class ns1__AMapType;	/* glpi.h:146 */
class _Anything__genericExecute;	/* glpi.h:158 */
class _Anything__genericExecuteResponse;	/* glpi.h:161 */
class ArrayOfAMapType;	/* glpi.h:149 */
class ns1__MapType;	/* glpi.h:152 */
class ns1__Map;	/* glpi.h:155 */
struct __Anything__genericExecute;	/* glpi.h:548 */

/* glpi.h:135 */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Type xsd__anyType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* simple XSD type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XSD type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_xsd__anyType
        virtual int soap_type(void) const { return SOAP_TYPE_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW(xsd__anyType); }
      public:
        /// Constructor with initializations
        xsd__anyType() : __item(), soap()
        { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:229 */
#ifndef SOAP_TYPE__ns1__AMapType_item
#define SOAP_TYPE__ns1__AMapType_item (15)
/* complex XSD type 'ns1:AMapType-item': */
class SOAP_CMAC _ns1__AMapType_item {
      public:
        /// Required element 'key' of XSD type 'xsd:anyType'
        xsd__anyType *key;
        /// Required element 'value' of XSD type 'xsd:anyType'
        xsd__anyType *value;
      public:
        /// Return unique type id SOAP_TYPE__ns1__AMapType_item
        virtual int soap_type(void) const { return SOAP_TYPE__ns1__AMapType_item; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__AMapType_item, default initialized and not managed by a soap context
        virtual _ns1__AMapType_item *soap_alloc(void) const { return SOAP_NEW(_ns1__AMapType_item); }
      public:
        /// Constructor with initializations
        _ns1__AMapType_item() : key(), value()
        { }
        virtual ~_ns1__AMapType_item() { }
        /// Friend allocator used by soap_new__ns1__AMapType_item(struct soap*, int)
        friend SOAP_FMAC1 _ns1__AMapType_item * SOAP_FMAC2 soap_instantiate__ns1__AMapType_item(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:146 */
#ifndef SOAP_TYPE_ns1__AMapType
#define SOAP_TYPE_ns1__AMapType (9)
/* Type ns1__AMapType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'ns1:AMapType': */
class SOAP_CMAC ns1__AMapType : public xsd__anyType {
      public:
        /// Sequence of elements 'item' of XSD type 'ns1:AMapType-item' stored in dynamic array item of length __sizeitem
        int __sizeitem;
        _ns1__AMapType_item *item;
      public:
        /// Return unique type id SOAP_TYPE_ns1__AMapType
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__AMapType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__AMapType, default initialized and not managed by a soap context
        virtual ns1__AMapType *soap_alloc(void) const { return SOAP_NEW(ns1__AMapType); }
      public:
        /// Constructor with initializations
        ns1__AMapType() : __sizeitem(), item()
        { }
        virtual ~ns1__AMapType() { }
        /// Friend allocator used by soap_new_ns1__AMapType(struct soap*, int)
        friend SOAP_FMAC1 ns1__AMapType * SOAP_FMAC2 soap_instantiate_ns1__AMapType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:158 */
#ifndef SOAP_TYPE__Anything__genericExecute
#define SOAP_TYPE__Anything__genericExecute (13)
/* complex XSD type 'Anything:genericExecute': */
class SOAP_CMAC _Anything__genericExecute {
      public:
        /// Required element 'params' of XSD type 'ns1:MapType'
        ns1__MapType *params;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Anything__genericExecute
        virtual int soap_type(void) const { return SOAP_TYPE__Anything__genericExecute; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Anything__genericExecute, default initialized and not managed by a soap context
        virtual _Anything__genericExecute *soap_alloc(void) const { return SOAP_NEW(_Anything__genericExecute); }
      public:
        /// Constructor with initializations
        _Anything__genericExecute() : params(), soap()
        { }
        virtual ~_Anything__genericExecute() { }
        /// Friend allocator used by soap_new__Anything__genericExecute(struct soap*, int)
        friend SOAP_FMAC1 _Anything__genericExecute * SOAP_FMAC2 soap_instantiate__Anything__genericExecute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:161 */
#ifndef SOAP_TYPE__Anything__genericExecuteResponse
#define SOAP_TYPE__Anything__genericExecuteResponse (14)
/* complex XSD type 'Anything:genericExecuteResponse': */
class SOAP_CMAC _Anything__genericExecuteResponse {
      public:
        /// Required element 'return' of XSD type 'xsd:anyType'
        xsd__anyType *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE__Anything__genericExecuteResponse
        virtual int soap_type(void) const { return SOAP_TYPE__Anything__genericExecuteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _Anything__genericExecuteResponse, default initialized and not managed by a soap context
        virtual _Anything__genericExecuteResponse *soap_alloc(void) const { return SOAP_NEW(_Anything__genericExecuteResponse); }
      public:
        /// Constructor with initializations
        _Anything__genericExecuteResponse() : return_(), soap()
        { }
        virtual ~_Anything__genericExecuteResponse() { }
        /// Friend allocator used by soap_new__Anything__genericExecuteResponse(struct soap*, int)
        friend SOAP_FMAC1 _Anything__genericExecuteResponse * SOAP_FMAC2 soap_instantiate__Anything__genericExecuteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:149 */
#ifndef SOAP_TYPE_ArrayOfAMapType
#define SOAP_TYPE_ArrayOfAMapType (10)
/* Type ArrayOfAMapType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP encoded array of ns1:AMapType schema type: */
class SOAP_CMAC ArrayOfAMapType : public xsd__anyType {
      public:
        ns1__AMapType **__ptritem;
        int __size;
      public:
        /// Return unique type id SOAP_TYPE_ArrayOfAMapType
        virtual int soap_type(void) const { return SOAP_TYPE_ArrayOfAMapType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ArrayOfAMapType, default initialized and not managed by a soap context
        virtual ArrayOfAMapType *soap_alloc(void) const { return SOAP_NEW(ArrayOfAMapType); }
      public:
        /// Constructor with initializations
        ArrayOfAMapType() : __ptritem(), __size()
        { }
        virtual ~ArrayOfAMapType() { }
        /// Friend allocator used by soap_new_ArrayOfAMapType(struct soap*, int)
        friend SOAP_FMAC1 ArrayOfAMapType * SOAP_FMAC2 soap_instantiate_ArrayOfAMapType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:152 */
#ifndef SOAP_TYPE_ns1__MapType
#define SOAP_TYPE_ns1__MapType (11)
/* Type ns1__MapType is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'ns1:MapType': */
class SOAP_CMAC ns1__MapType : public ns1__AMapType {
      public:
        /// Return unique type id SOAP_TYPE_ns1__MapType
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__MapType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__MapType, default initialized and not managed by a soap context
        virtual ns1__MapType *soap_alloc(void) const { return SOAP_NEW(ns1__MapType); }
      public:
        /// Constructor with initializations
        ns1__MapType()
        { }
        virtual ~ns1__MapType() { }
        /// Friend allocator used by soap_new_ns1__MapType(struct soap*, int)
        friend SOAP_FMAC1 ns1__MapType * SOAP_FMAC2 soap_instantiate_ns1__MapType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:155 */
#ifndef SOAP_TYPE_ns1__Map
#define SOAP_TYPE_ns1__Map (12)
/* Type ns1__Map is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* complex XSD type 'ns1:Map': */
class SOAP_CMAC ns1__Map : public ns1__MapType {
      public:
        /// Return unique type id SOAP_TYPE_ns1__Map
        virtual int soap_type(void) const { return SOAP_TYPE_ns1__Map; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns1__Map, default initialized and not managed by a soap context
        virtual ns1__Map *soap_alloc(void) const { return SOAP_NEW(ns1__Map); }
      public:
        /// Constructor with initializations
        ns1__Map()
        { }
        virtual ~ns1__Map() { }
        /// Friend allocator used by soap_new_ns1__Map(struct soap*, int)
        friend SOAP_FMAC1 ns1__Map * SOAP_FMAC2 soap_instantiate_ns1__Map(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:548 */
#ifndef SOAP_TYPE___Anything__genericExecute
#define SOAP_TYPE___Anything__genericExecute (24)
/* Wrapper: */
struct SOAP_CMAC __Anything__genericExecute {
      public:
        /** Optional element 'Anything:genericExecute' of XSD type 'Anything:genericExecute' */
        _Anything__genericExecute *Anything__genericExecute;
      public:
        /** Return unique type id SOAP_TYPE___Anything__genericExecute */
        int soap_type() const { return SOAP_TYPE___Anything__genericExecute; }
        /** Constructor with member initializations */
        __Anything__genericExecute() : Anything__genericExecute()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 __Anything__genericExecute * SOAP_FMAC2 soap_instantiate___Anything__genericExecute(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* glpi.h:641 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (25)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* glpi.h:641 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (26)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* glpi.h:641 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (28)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* glpi.h:641 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (31)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* glpi.h:641 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (32)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        int soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail()
        { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* glpi.h:121 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* glpi.h:121 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* _ns1__AMapType_item has binding name '_ns1__AMapType_item' for type '' */
#ifndef SOAP_TYPE__ns1__AMapType_item
#define SOAP_TYPE__ns1__AMapType_item (15)
#endif

/* _Anything__genericExecuteResponse has binding name '_Anything__genericExecuteResponse' for type '' */
#ifndef SOAP_TYPE__Anything__genericExecuteResponse
#define SOAP_TYPE__Anything__genericExecuteResponse (14)
#endif

/* _Anything__genericExecute has binding name '_Anything__genericExecute' for type '' */
#ifndef SOAP_TYPE__Anything__genericExecute
#define SOAP_TYPE__Anything__genericExecute (13)
#endif

/* ns1__Map has binding name 'ns1__Map' for type 'ns1:Map' */
#ifndef SOAP_TYPE_ns1__Map
#define SOAP_TYPE_ns1__Map (12)
#endif

/* ns1__MapType has binding name 'ns1__MapType' for type 'ns1:MapType' */
#ifndef SOAP_TYPE_ns1__MapType
#define SOAP_TYPE_ns1__MapType (11)
#endif

/* ArrayOfAMapType has binding name 'ArrayOfAMapType' for type 'ns1:AMapType' */
#ifndef SOAP_TYPE_ArrayOfAMapType
#define SOAP_TYPE_ArrayOfAMapType (10)
#endif

/* ns1__AMapType has binding name 'ns1__AMapType' for type 'ns1:AMapType' */
#ifndef SOAP_TYPE_ns1__AMapType
#define SOAP_TYPE_ns1__AMapType (9)
#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (32)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (31)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (28)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (26)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (25)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (34)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (33)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (27)
#endif

/* _Anything__genericExecute * has binding name 'PointerTo_Anything__genericExecute' for type '' */
#ifndef SOAP_TYPE_PointerTo_Anything__genericExecute
#define SOAP_TYPE_PointerTo_Anything__genericExecute (21)
#endif

/* ns1__AMapType ** has binding name 'PointerToPointerTons1__AMapType' for type 'ns1:AMapType' */
#ifndef SOAP_TYPE_PointerToPointerTons1__AMapType
#define SOAP_TYPE_PointerToPointerTons1__AMapType (20)
#endif

/* ns1__AMapType * has binding name 'PointerTons1__AMapType' for type 'ns1:AMapType' */
#ifndef SOAP_TYPE_PointerTons1__AMapType
#define SOAP_TYPE_PointerTons1__AMapType (19)
#endif

/* ns1__MapType * has binding name 'PointerTons1__MapType' for type 'ns1:MapType' */
#ifndef SOAP_TYPE_PointerTons1__MapType
#define SOAP_TYPE_PointerTons1__MapType (18)
#endif

/* _ns1__AMapType_item * has binding name 'PointerTo_ns1__AMapType_item' for type '' */
#ifndef SOAP_TYPE_PointerTo_ns1__AMapType_item
#define SOAP_TYPE_PointerTo_ns1__AMapType_item (17)
#endif

/* xsd__anyType * has binding name 'PointerToxsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_PointerToxsd__anyType
#define SOAP_TYPE_PointerToxsd__anyType (16)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___Anything__genericExecute(struct soap *soap, const char *soap_endpoint, const char *soap_action, _Anything__genericExecute *Anything__genericExecute, _Anything__genericExecuteResponse &Anything__genericExecuteResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation '__Anything__genericExecute' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __Anything__genericExecute(struct soap*, _Anything__genericExecute *Anything__genericExecute, _Anything__genericExecuteResponse &Anything__genericExecuteResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___Anything__genericExecute(struct soap*);

#endif

/* End of soapStub.h */
