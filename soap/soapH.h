/* soapH.h
   Generated by gSOAP 2.8.49 for glpi.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_byte(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (soap_read_byte(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_int(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (soap_read_int(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__AMapType_item_DEFINED
#define SOAP_TYPE__ns1__AMapType_item_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AMapType_item(struct soap*, const char*, int, const _ns1__AMapType_item *, const char*);
SOAP_FMAC3 _ns1__AMapType_item * SOAP_FMAC4 soap_in__ns1__AMapType_item(struct soap*, const char*, _ns1__AMapType_item *, const char*);
SOAP_FMAC1 _ns1__AMapType_item * SOAP_FMAC2 soap_instantiate__ns1__AMapType_item(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__AMapType_item * soap_new__ns1__AMapType_item(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__AMapType_item(soap, n, NULL, NULL, NULL);
}

inline _ns1__AMapType_item * soap_new_req__ns1__AMapType_item(
	struct soap *soap,
	xsd__anyType *key,
	xsd__anyType *value)
{
	_ns1__AMapType_item *_p = soap_new__ns1__AMapType_item(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AMapType_item::key = key;
		_p->_ns1__AMapType_item::value = value;
	}
	return _p;
}

inline _ns1__AMapType_item * soap_new_set__ns1__AMapType_item(
	struct soap *soap,
	xsd__anyType *key,
	xsd__anyType *value)
{
	_ns1__AMapType_item *_p = soap_new__ns1__AMapType_item(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__AMapType_item::key = key;
		_p->_ns1__AMapType_item::value = value;
	}
	return _p;
}

inline int soap_write__ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType-item", p->soap_type() == SOAP_TYPE__ns1__AMapType_item ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__AMapType_item(struct soap *soap, const char *URL, _ns1__AMapType_item const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType-item", p->soap_type() == SOAP_TYPE__ns1__AMapType_item ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__ns1__AMapType_item(struct soap *soap, const char *URL, _ns1__AMapType_item const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType-item", p->soap_type() == SOAP_TYPE__ns1__AMapType_item ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__AMapType_item * SOAP_FMAC4 soap_get__ns1__AMapType_item(struct soap*, _ns1__AMapType_item *, const char*, const char*);

inline int soap_read__ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__ns1__AMapType_item(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__AMapType_item(struct soap *soap, const char *URL, _ns1__AMapType_item *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__ns1__AMapType_item(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item *p)
{
	if (soap_read__ns1__AMapType_item(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__Anything__genericExecuteResponse_DEFINED
#define SOAP_TYPE__Anything__genericExecuteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Anything__genericExecuteResponse(struct soap*, const char*, int, const _Anything__genericExecuteResponse *, const char*);
SOAP_FMAC3 _Anything__genericExecuteResponse * SOAP_FMAC4 soap_in__Anything__genericExecuteResponse(struct soap*, const char*, _Anything__genericExecuteResponse *, const char*);
SOAP_FMAC1 _Anything__genericExecuteResponse * SOAP_FMAC2 soap_instantiate__Anything__genericExecuteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _Anything__genericExecuteResponse * soap_new__Anything__genericExecuteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__Anything__genericExecuteResponse(soap, n, NULL, NULL, NULL);
}

inline _Anything__genericExecuteResponse * soap_new_req__Anything__genericExecuteResponse(
	struct soap *soap,
	xsd__anyType *return_)
{
	_Anything__genericExecuteResponse *_p = soap_new__Anything__genericExecuteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Anything__genericExecuteResponse::return_ = return_;
	}
	return _p;
}

inline _Anything__genericExecuteResponse * soap_new_set__Anything__genericExecuteResponse(
	struct soap *soap,
	xsd__anyType *return_)
{
	_Anything__genericExecuteResponse *_p = soap_new__Anything__genericExecuteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Anything__genericExecuteResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write__Anything__genericExecuteResponse(struct soap *soap, _Anything__genericExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecuteResponse", p->soap_type() == SOAP_TYPE__Anything__genericExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Anything__genericExecuteResponse(struct soap *soap, const char *URL, _Anything__genericExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecuteResponse", p->soap_type() == SOAP_TYPE__Anything__genericExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__Anything__genericExecuteResponse(struct soap *soap, const char *URL, _Anything__genericExecuteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecuteResponse", p->soap_type() == SOAP_TYPE__Anything__genericExecuteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _Anything__genericExecuteResponse * SOAP_FMAC4 soap_get__Anything__genericExecuteResponse(struct soap*, _Anything__genericExecuteResponse *, const char*, const char*);

inline int soap_read__Anything__genericExecuteResponse(struct soap *soap, _Anything__genericExecuteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__Anything__genericExecuteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Anything__genericExecuteResponse(struct soap *soap, const char *URL, _Anything__genericExecuteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__Anything__genericExecuteResponse(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__Anything__genericExecuteResponse(struct soap *soap, _Anything__genericExecuteResponse *p)
{
	if (soap_read__Anything__genericExecuteResponse(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__Anything__genericExecute_DEFINED
#define SOAP_TYPE__Anything__genericExecute_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__Anything__genericExecute(struct soap*, const char*, int, const _Anything__genericExecute *, const char*);
SOAP_FMAC3 _Anything__genericExecute * SOAP_FMAC4 soap_in__Anything__genericExecute(struct soap*, const char*, _Anything__genericExecute *, const char*);
SOAP_FMAC1 _Anything__genericExecute * SOAP_FMAC2 soap_instantiate__Anything__genericExecute(struct soap*, int, const char*, const char*, size_t*);

inline _Anything__genericExecute * soap_new__Anything__genericExecute(struct soap *soap, int n = -1)
{
	return soap_instantiate__Anything__genericExecute(soap, n, NULL, NULL, NULL);
}

inline _Anything__genericExecute * soap_new_req__Anything__genericExecute(
	struct soap *soap,
	ns1__MapType *params)
{
	_Anything__genericExecute *_p = soap_new__Anything__genericExecute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Anything__genericExecute::params = params;
	}
	return _p;
}

inline _Anything__genericExecute * soap_new_set__Anything__genericExecute(
	struct soap *soap,
	ns1__MapType *params)
{
	_Anything__genericExecute *_p = soap_new__Anything__genericExecute(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_Anything__genericExecute::params = params;
	}
	return _p;
}

inline int soap_write__Anything__genericExecute(struct soap *soap, _Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecute", p->soap_type() == SOAP_TYPE__Anything__genericExecute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__Anything__genericExecute(struct soap *soap, const char *URL, _Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecute", p->soap_type() == SOAP_TYPE__Anything__genericExecute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__Anything__genericExecute(struct soap *soap, const char *URL, _Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "Anything:genericExecute", p->soap_type() == SOAP_TYPE__Anything__genericExecute ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 _Anything__genericExecute * SOAP_FMAC4 soap_get__Anything__genericExecute(struct soap*, _Anything__genericExecute *, const char*, const char*);

inline int soap_read__Anything__genericExecute(struct soap *soap, _Anything__genericExecute *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get__Anything__genericExecute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__Anything__genericExecute(struct soap *soap, const char *URL, _Anything__genericExecute *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__Anything__genericExecute(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__Anything__genericExecute(struct soap *soap, _Anything__genericExecute *p)
{
	if (soap_read__Anything__genericExecute(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__Map_DEFINED
#define SOAP_TYPE_ns1__Map_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Map(struct soap*, const char*, int, const ns1__Map *, const char*);
SOAP_FMAC3 ns1__Map * SOAP_FMAC4 soap_in_ns1__Map(struct soap*, const char*, ns1__Map *, const char*);
SOAP_FMAC1 ns1__Map * SOAP_FMAC2 soap_instantiate_ns1__Map(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Map * soap_new_ns1__Map(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__Map(soap, n, NULL, NULL, NULL);
}

inline ns1__Map * soap_new_req_ns1__Map(
	struct soap *soap,
	int __sizeitem__2,
	_ns1__AMapType_item *item__2)
{
	ns1__Map *_p = soap_new_ns1__Map(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem__2;
		_p->ns1__AMapType::item = item__2;
	}
	return _p;
}

inline ns1__Map * soap_new_set_ns1__Map(
	struct soap *soap,
	int __sizeitem__2,
	_ns1__AMapType_item *item__2,
	char *__item__3)
{
	ns1__Map *_p = soap_new_ns1__Map(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem__2;
		_p->ns1__AMapType::item = item__2;
		_p->xsd__anyType::__item = __item__3;
	}
	return _p;
}

inline int soap_write_ns1__Map(struct soap *soap, ns1__Map const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Map", p->soap_type() == SOAP_TYPE_ns1__Map ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__Map(struct soap *soap, const char *URL, ns1__Map const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Map", p->soap_type() == SOAP_TYPE_ns1__Map ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__Map(struct soap *soap, const char *URL, ns1__Map const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Map", p->soap_type() == SOAP_TYPE_ns1__Map ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__Map * SOAP_FMAC4 soap_get_ns1__Map(struct soap*, ns1__Map *, const char*, const char*);

inline int soap_read_ns1__Map(struct soap *soap, ns1__Map *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__Map(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__Map(struct soap *soap, const char *URL, ns1__Map *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__Map(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__Map(struct soap *soap, ns1__Map *p)
{
	if (soap_read_ns1__Map(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__MapType_DEFINED
#define SOAP_TYPE_ns1__MapType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MapType(struct soap*, const char*, int, const ns1__MapType *, const char*);
SOAP_FMAC3 ns1__MapType * SOAP_FMAC4 soap_in_ns1__MapType(struct soap*, const char*, ns1__MapType *, const char*);
SOAP_FMAC1 ns1__MapType * SOAP_FMAC2 soap_instantiate_ns1__MapType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__MapType * soap_new_ns1__MapType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__MapType(soap, n, NULL, NULL, NULL);
}

inline ns1__MapType * soap_new_req_ns1__MapType(
	struct soap *soap,
	int __sizeitem__1,
	_ns1__AMapType_item *item__1)
{
	ns1__MapType *_p = soap_new_ns1__MapType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem__1;
		_p->ns1__AMapType::item = item__1;
	}
	return _p;
}

inline ns1__MapType * soap_new_set_ns1__MapType(
	struct soap *soap,
	int __sizeitem__1,
	_ns1__AMapType_item *item__1,
	char *__item__2)
{
	ns1__MapType *_p = soap_new_ns1__MapType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem__1;
		_p->ns1__AMapType::item = item__1;
		_p->xsd__anyType::__item = __item__2;
	}
	return _p;
}

inline int soap_write_ns1__MapType(struct soap *soap, ns1__MapType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MapType", p->soap_type() == SOAP_TYPE_ns1__MapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__MapType(struct soap *soap, const char *URL, ns1__MapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MapType", p->soap_type() == SOAP_TYPE_ns1__MapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__MapType(struct soap *soap, const char *URL, ns1__MapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:MapType", p->soap_type() == SOAP_TYPE_ns1__MapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__MapType * SOAP_FMAC4 soap_get_ns1__MapType(struct soap*, ns1__MapType *, const char*, const char*);

inline int soap_read_ns1__MapType(struct soap *soap, ns1__MapType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__MapType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__MapType(struct soap *soap, const char *URL, ns1__MapType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__MapType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__MapType(struct soap *soap, ns1__MapType *p)
{
	if (soap_read_ns1__MapType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ArrayOfAMapType_DEFINED
#define SOAP_TYPE_ArrayOfAMapType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfAMapType(struct soap*, const char*, int, const ArrayOfAMapType *, const char*);
SOAP_FMAC3 ArrayOfAMapType * SOAP_FMAC4 soap_in_ArrayOfAMapType(struct soap*, const char*, ArrayOfAMapType *, const char*);
SOAP_FMAC1 ArrayOfAMapType * SOAP_FMAC2 soap_instantiate_ArrayOfAMapType(struct soap*, int, const char*, const char*, size_t*);

inline ArrayOfAMapType * soap_new_ArrayOfAMapType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ArrayOfAMapType(soap, n, NULL, NULL, NULL);
}

inline ArrayOfAMapType * soap_new_req_ArrayOfAMapType(
	struct soap *soap)
{
	ArrayOfAMapType *_p = soap_new_ArrayOfAMapType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ArrayOfAMapType * soap_new_set_ArrayOfAMapType(
	struct soap *soap,
	ns1__AMapType **__ptritem,
	int __size,
	char *__item__1)
{
	ArrayOfAMapType *_p = soap_new_ArrayOfAMapType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ArrayOfAMapType::__ptritem = __ptritem;
		_p->ArrayOfAMapType::__size = __size;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ArrayOfAMapType(struct soap *soap, ArrayOfAMapType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOfAMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ArrayOfAMapType(struct soap *soap, const char *URL, ArrayOfAMapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOfAMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ArrayOfAMapType(struct soap *soap, const char *URL, ArrayOfAMapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "SOAP-ENC:Array", p->soap_type() == SOAP_TYPE_ArrayOfAMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ArrayOfAMapType * SOAP_FMAC4 soap_get_ArrayOfAMapType(struct soap*, ArrayOfAMapType *, const char*, const char*);

inline int soap_read_ArrayOfAMapType(struct soap *soap, ArrayOfAMapType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ArrayOfAMapType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ArrayOfAMapType(struct soap *soap, const char *URL, ArrayOfAMapType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ArrayOfAMapType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ArrayOfAMapType(struct soap *soap, ArrayOfAMapType *p)
{
	if (soap_read_ArrayOfAMapType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_ns1__AMapType_DEFINED
#define SOAP_TYPE_ns1__AMapType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AMapType(struct soap*, const char*, int, const ns1__AMapType *, const char*);
SOAP_FMAC3 ns1__AMapType * SOAP_FMAC4 soap_in_ns1__AMapType(struct soap*, const char*, ns1__AMapType *, const char*);
SOAP_FMAC1 ns1__AMapType * SOAP_FMAC2 soap_instantiate_ns1__AMapType(struct soap*, int, const char*, const char*, size_t*);

inline ns1__AMapType * soap_new_ns1__AMapType(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns1__AMapType(soap, n, NULL, NULL, NULL);
}

inline ns1__AMapType * soap_new_req_ns1__AMapType(
	struct soap *soap,
	int __sizeitem,
	_ns1__AMapType_item *item)
{
	ns1__AMapType *_p = soap_new_ns1__AMapType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem;
		_p->ns1__AMapType::item = item;
	}
	return _p;
}

inline ns1__AMapType * soap_new_set_ns1__AMapType(
	struct soap *soap,
	int __sizeitem,
	_ns1__AMapType_item *item,
	char *__item__1)
{
	ns1__AMapType *_p = soap_new_ns1__AMapType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns1__AMapType::__sizeitem = __sizeitem;
		_p->ns1__AMapType::item = item;
		_p->xsd__anyType::__item = __item__1;
	}
	return _p;
}

inline int soap_write_ns1__AMapType(struct soap *soap, ns1__AMapType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType", p->soap_type() == SOAP_TYPE_ns1__AMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns1__AMapType(struct soap *soap, const char *URL, ns1__AMapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType", p->soap_type() == SOAP_TYPE_ns1__AMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_ns1__AMapType(struct soap *soap, const char *URL, ns1__AMapType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:AMapType", p->soap_type() == SOAP_TYPE_ns1__AMapType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 ns1__AMapType * SOAP_FMAC4 soap_get_ns1__AMapType(struct soap*, ns1__AMapType *, const char*, const char*);

inline int soap_read_ns1__AMapType(struct soap *soap, ns1__AMapType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_ns1__AMapType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns1__AMapType(struct soap *soap, const char *URL, ns1__AMapType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_ns1__AMapType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_ns1__AMapType(struct soap *soap, ns1__AMapType *p)
{
	if (soap_read_ns1__AMapType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_xsd__anyType_DEFINED
#define SOAP_TYPE_xsd__anyType_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);
SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1)
{
	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

inline xsd__anyType * soap_new_req_xsd__anyType(
	struct soap *soap)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline xsd__anyType * soap_new_set_xsd__anyType(
	struct soap *soap,
	char *__item)
{
	xsd__anyType *_p = soap_new_xsd__anyType(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->xsd__anyType::__item = __item;
	}
	return _p;
}

inline int soap_write_xsd__anyType(struct soap *soap, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "xsd:anyType", p->soap_type() == SOAP_TYPE_xsd__anyType ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

inline int soap_read_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || soap_get_xsd__anyType(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_xsd__anyType(struct soap *soap, const char *URL, xsd__anyType *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_xsd__anyType(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_xsd__anyType(struct soap *soap, xsd__anyType *p)
{
	if (soap_read_xsd__anyType(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Fault(soap, p), 0) || soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Reason(soap, p), 0) || soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Detail(soap, p), 0) || soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Code(soap, p), 0) || soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize_SOAP_ENV__Header(soap, p), 0) || soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___Anything__genericExecute_DEFINED
#define SOAP_TYPE___Anything__genericExecute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___Anything__genericExecute(struct soap*, struct __Anything__genericExecute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Anything__genericExecute(struct soap*, const struct __Anything__genericExecute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___Anything__genericExecute(struct soap*, const char*, int, const struct __Anything__genericExecute *, const char*);
SOAP_FMAC3 struct __Anything__genericExecute * SOAP_FMAC4 soap_in___Anything__genericExecute(struct soap*, const char*, struct __Anything__genericExecute *, const char*);
SOAP_FMAC1 struct __Anything__genericExecute * SOAP_FMAC2 soap_instantiate___Anything__genericExecute(struct soap*, int, const char*, const char*, size_t*);

inline struct __Anything__genericExecute * soap_new___Anything__genericExecute(struct soap *soap, int n = -1)
{
	return soap_instantiate___Anything__genericExecute(soap, n, NULL, NULL, NULL);
}

inline struct __Anything__genericExecute * soap_new_req___Anything__genericExecute(
	struct soap *soap)
{
	struct __Anything__genericExecute *_p = soap_new___Anything__genericExecute(soap);
	if (_p)
	{	soap_default___Anything__genericExecute(soap, _p);
	}
	return _p;
}

inline struct __Anything__genericExecute * soap_new_set___Anything__genericExecute(
	struct soap *soap,
	_Anything__genericExecute *Anything__genericExecute)
{
	struct __Anything__genericExecute *_p = soap_new___Anything__genericExecute(soap);
	if (_p)
	{	soap_default___Anything__genericExecute(soap, _p);
		_p->Anything__genericExecute = Anything__genericExecute;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___Anything__genericExecute(struct soap*, const struct __Anything__genericExecute *, const char*, const char*);

inline int soap_write___Anything__genericExecute(struct soap *soap, struct __Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (soap_serialize___Anything__genericExecute(soap, p), 0) || soap_put___Anything__genericExecute(soap, p, "-Anything:genericExecute", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___Anything__genericExecute(struct soap *soap, const char *URL, struct __Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || (soap_serialize___Anything__genericExecute(soap, p), 0) || soap_put___Anything__genericExecute(soap, p, "-Anything:genericExecute", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send___Anything__genericExecute(struct soap *soap, const char *URL, struct __Anything__genericExecute const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || (soap_serialize___Anything__genericExecute(soap, p), 0) || soap_put___Anything__genericExecute(soap, p, "-Anything:genericExecute", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 struct __Anything__genericExecute * SOAP_FMAC4 soap_get___Anything__genericExecute(struct soap*, struct __Anything__genericExecute *, const char*, const char*);

inline int soap_read___Anything__genericExecute(struct soap *soap, struct __Anything__genericExecute *p)
{
	if (p)
	{	soap_default___Anything__genericExecute(soap, p);
		if (soap_begin_recv(soap) || soap_get___Anything__genericExecute(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___Anything__genericExecute(struct soap *soap, const char *URL, struct __Anything__genericExecute *p)
{
	if (soap_GET(soap, URL, NULL) || soap_read___Anything__genericExecute(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv___Anything__genericExecute(struct soap *soap, struct __Anything__genericExecute *p)
{
	if (soap_read___Anything__genericExecute(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_Anything__genericExecute_DEFINED
#define SOAP_TYPE_PointerTo_Anything__genericExecute_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Anything__genericExecute(struct soap*, _Anything__genericExecute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Anything__genericExecute(struct soap*, const char *, int, _Anything__genericExecute *const*, const char *);
SOAP_FMAC3 _Anything__genericExecute ** SOAP_FMAC4 soap_in_PointerTo_Anything__genericExecute(struct soap*, const char*, _Anything__genericExecute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Anything__genericExecute(struct soap*, _Anything__genericExecute *const*, const char*, const char*);
SOAP_FMAC3 _Anything__genericExecute ** SOAP_FMAC4 soap_get_PointerTo_Anything__genericExecute(struct soap*, _Anything__genericExecute **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToPointerTons1__AMapType_DEFINED
#define SOAP_TYPE_PointerToPointerTons1__AMapType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AMapType(struct soap*, ns1__AMapType **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AMapType(struct soap*, const char *, int, ns1__AMapType **const*, const char *);
SOAP_FMAC3 ns1__AMapType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AMapType(struct soap*, const char*, ns1__AMapType ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AMapType(struct soap*, ns1__AMapType **const*, const char*, const char*);
SOAP_FMAC3 ns1__AMapType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AMapType(struct soap*, ns1__AMapType ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__AMapType_DEFINED
#define SOAP_TYPE_PointerTons1__AMapType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AMapType(struct soap*, ns1__AMapType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AMapType(struct soap*, const char *, int, ns1__AMapType *const*, const char *);
SOAP_FMAC3 ns1__AMapType ** SOAP_FMAC4 soap_in_PointerTons1__AMapType(struct soap*, const char*, ns1__AMapType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AMapType(struct soap*, ns1__AMapType *const*, const char*, const char*);
SOAP_FMAC3 ns1__AMapType ** SOAP_FMAC4 soap_get_PointerTons1__AMapType(struct soap*, ns1__AMapType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTons1__MapType_DEFINED
#define SOAP_TYPE_PointerTons1__MapType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MapType(struct soap*, ns1__MapType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MapType(struct soap*, const char *, int, ns1__MapType *const*, const char *);
SOAP_FMAC3 ns1__MapType ** SOAP_FMAC4 soap_in_PointerTons1__MapType(struct soap*, const char*, ns1__MapType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MapType(struct soap*, ns1__MapType *const*, const char*, const char*);
SOAP_FMAC3 ns1__MapType ** SOAP_FMAC4 soap_get_PointerTons1__MapType(struct soap*, ns1__MapType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__AMapType_item_DEFINED
#define SOAP_TYPE_PointerTo_ns1__AMapType_item_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AMapType_item(struct soap*, _ns1__AMapType_item *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AMapType_item(struct soap*, const char *, int, _ns1__AMapType_item *const*, const char *);
SOAP_FMAC3 _ns1__AMapType_item ** SOAP_FMAC4 soap_in_PointerTo_ns1__AMapType_item(struct soap*, const char*, _ns1__AMapType_item **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AMapType_item(struct soap*, _ns1__AMapType_item *const*, const char*, const char*);
SOAP_FMAC3 _ns1__AMapType_item ** SOAP_FMAC4 soap_get_PointerTo_ns1__AMapType_item(struct soap*, _ns1__AMapType_item **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToxsd__anyType_DEFINED
#define SOAP_TYPE_PointerToxsd__anyType_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap*, xsd__anyType *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap*, const char *, int, xsd__anyType *const*, const char *);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap*, const char*, xsd__anyType **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap*, xsd__anyType *const*, const char*, const char*);
SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap*, xsd__anyType **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read__QName(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (soap_read__QName(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_connect(soap, URL, NULL) || soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || soap_read_string(soap, p))
		return soap->error;
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (soap_read_string(soap, p) || soap_closesock(soap))
		return soap->error;
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
