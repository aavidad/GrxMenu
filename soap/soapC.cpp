/* soapC.cpp
   Generated by gSOAP 2.8.49 for glpi.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.49 2017-12-12 23:19:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_ns1__Map:
		return soap_in_ns1__Map(soap, NULL, NULL, "ns1:Map");
	case SOAP_TYPE_ns1__MapType:
		return soap_in_ns1__MapType(soap, NULL, NULL, "ns1:MapType");
	case SOAP_TYPE_ArrayOfAMapType:
		return soap_in_ArrayOfAMapType(soap, NULL, NULL, "ns1:AMapType");
	case SOAP_TYPE_ns1__AMapType:
		return soap_in_ns1__AMapType(soap, NULL, NULL, "ns1:AMapType");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_Anything__genericExecute:
		return soap_in_PointerTo_Anything__genericExecute(soap, NULL, NULL, "Anything:genericExecute");
	case SOAP_TYPE_PointerToPointerTons1__AMapType:
		return soap_in_PointerToPointerTons1__AMapType(soap, NULL, NULL, "ns1:AMapType");
	case SOAP_TYPE_PointerTons1__AMapType:
		return soap_in_PointerTons1__AMapType(soap, NULL, NULL, "ns1:AMapType");
	case SOAP_TYPE_PointerTons1__MapType:
		return soap_in_PointerTons1__MapType(soap, NULL, NULL, "ns1:MapType");
	case SOAP_TYPE_PointerTo_ns1__AMapType_item:
		return soap_in_PointerTo_ns1__AMapType_item(soap, NULL, NULL, "ns1:AMapType-item");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_in_PointerToxsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:Map"))
		{	*type = SOAP_TYPE_ns1__Map;
			return soap_in_ns1__Map(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:MapType"))
		{	*type = SOAP_TYPE_ns1__MapType;
			return soap_in_ns1__MapType(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "ns1:AMapType"))
		{	*type = SOAP_TYPE_ArrayOfAMapType;
			return soap_in_ArrayOfAMapType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AMapType"))
		{	*type = SOAP_TYPE_ns1__AMapType;
			return soap_in_ns1__AMapType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:AMapType-item"))
		{	*type = SOAP_TYPE__ns1__AMapType_item;
			return soap_in__ns1__AMapType_item(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Anything:genericExecuteResponse"))
		{	*type = SOAP_TYPE__Anything__genericExecuteResponse;
			return soap_in__Anything__genericExecuteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Anything:genericExecute"))
		{	*type = SOAP_TYPE__Anything__genericExecute;
			return soap_in__Anything__genericExecute(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				if (soap_ignore(soap) || soap_element_end_in(soap, NULL))
					return soap->error;
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__AMapType_item:
		return ((_ns1__AMapType_item *)ptr)->soap_out(soap, "ns1:AMapType-item", id, "");
	case SOAP_TYPE__Anything__genericExecuteResponse:
		return ((_Anything__genericExecuteResponse *)ptr)->soap_out(soap, "Anything:genericExecuteResponse", id, "");
	case SOAP_TYPE__Anything__genericExecute:
		return ((_Anything__genericExecute *)ptr)->soap_out(soap, "Anything:genericExecute", id, "");
	case SOAP_TYPE_ns1__Map:
		return ((ns1__Map *)ptr)->soap_out(soap, tag, id, "ns1:Map");
	case SOAP_TYPE_ns1__MapType:
		return ((ns1__MapType *)ptr)->soap_out(soap, tag, id, "ns1:MapType");
	case SOAP_TYPE_ArrayOfAMapType:
		return ((ArrayOfAMapType *)ptr)->soap_out(soap, tag, id, "ns1:AMapType");
	case SOAP_TYPE_ns1__AMapType:
		return ((ns1__AMapType *)ptr)->soap_out(soap, tag, id, "ns1:AMapType");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_Anything__genericExecute:
		return soap_out_PointerTo_Anything__genericExecute(soap, tag, id, (_Anything__genericExecute *const*)ptr, "Anything:genericExecute");
	case SOAP_TYPE_PointerToPointerTons1__AMapType:
		return soap_out_PointerToPointerTons1__AMapType(soap, tag, id, (ns1__AMapType **const*)ptr, "ns1:AMapType");
	case SOAP_TYPE_PointerTons1__AMapType:
		return soap_out_PointerTons1__AMapType(soap, tag, id, (ns1__AMapType *const*)ptr, "ns1:AMapType");
	case SOAP_TYPE_PointerTons1__MapType:
		return soap_out_PointerTons1__MapType(soap, tag, id, (ns1__MapType *const*)ptr, "ns1:MapType");
	case SOAP_TYPE_PointerTo_ns1__AMapType_item:
		return soap_out_PointerTo_ns1__AMapType_item(soap, tag, id, (_ns1__AMapType_item *const*)ptr, "ns1:AMapType-item");
	case SOAP_TYPE_PointerToxsd__anyType:
		return soap_out_PointerToxsd__anyType(soap, tag, id, (xsd__anyType *const*)ptr, "xsd:anyType");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__AMapType_item:
		((_ns1__AMapType_item *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__Anything__genericExecuteResponse:
		((_Anything__genericExecuteResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__Anything__genericExecute:
		((_Anything__genericExecute *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__Map:
		((ns1__Map *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__MapType:
		((ns1__MapType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ArrayOfAMapType:
		((ArrayOfAMapType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AMapType:
		((ns1__AMapType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___Anything__genericExecute:
		soap_serialize___Anything__genericExecute(soap, (const struct __Anything__genericExecute *)ptr);
		break;
	case SOAP_TYPE_PointerTo_Anything__genericExecute:
		soap_serialize_PointerTo_Anything__genericExecute(soap, (_Anything__genericExecute *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__AMapType:
		soap_serialize_PointerToPointerTons1__AMapType(soap, (ns1__AMapType **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AMapType:
		soap_serialize_PointerTons1__AMapType(soap, (ns1__AMapType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__MapType:
		soap_serialize_PointerTons1__MapType(soap, (ns1__MapType *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AMapType_item:
		soap_serialize_PointerTo_ns1__AMapType_item(soap, (_ns1__AMapType_item *const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__anyType:
		soap_serialize_PointerToxsd__anyType(soap, (xsd__anyType *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AMapType_item:
		return (void*)soap_instantiate__ns1__AMapType_item(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AMapType:
		return (void*)soap_instantiate_ns1__AMapType(soap, -1, type, arrayType, n);
	case SOAP_TYPE__Anything__genericExecute:
		return (void*)soap_instantiate__Anything__genericExecute(soap, -1, type, arrayType, n);
	case SOAP_TYPE__Anything__genericExecuteResponse:
		return (void*)soap_instantiate__Anything__genericExecuteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ArrayOfAMapType:
		return (void*)soap_instantiate_ArrayOfAMapType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__MapType:
		return (void*)soap_instantiate_ns1__MapType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__Map:
		return (void*)soap_instantiate_ns1__Map(soap, -1, type, arrayType, n);
	case SOAP_TYPE___Anything__genericExecute:
		return (void*)soap_instantiate___Anything__genericExecute(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<xsd__anyType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<xsd__anyType*>(p->ptr));
		break;
	case SOAP_TYPE__ns1__AMapType_item:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_ns1__AMapType_item*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_ns1__AMapType_item*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__AMapType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__AMapType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__AMapType*>(p->ptr));
		break;
	case SOAP_TYPE__Anything__genericExecute:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_Anything__genericExecute*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_Anything__genericExecute*>(p->ptr));
		break;
	case SOAP_TYPE__Anything__genericExecuteResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<_Anything__genericExecuteResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<_Anything__genericExecuteResponse*>(p->ptr));
		break;
	case SOAP_TYPE_ArrayOfAMapType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ArrayOfAMapType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ArrayOfAMapType*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__MapType:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__MapType*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__MapType*>(p->ptr));
		break;
	case SOAP_TYPE_ns1__Map:
		if (p->size < 0)
			SOAP_DELETE(static_cast<ns1__Map*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<ns1__Map*>(p->ptr));
		break;
	case SOAP_TYPE___Anything__genericExecute:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct __Anything__genericExecute*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct __Anything__genericExecute*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	do
	{	switch (t)
		{
		case SOAP_TYPE_ns1__AMapType: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ArrayOfAMapType: t = SOAP_TYPE_xsd__anyType; break;
		case SOAP_TYPE_ns1__MapType: t = SOAP_TYPE_ns1__AMapType; break;
		case SOAP_TYPE_ns1__Map: t = SOAP_TYPE_ns1__MapType; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyType type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyType*)p = *(xsd__anyType*)q;
		break;
	case SOAP_TYPE__ns1__AMapType_item:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__AMapType_item type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__AMapType_item*)p = *(_ns1__AMapType_item*)q;
		break;
	case SOAP_TYPE_ns1__AMapType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__AMapType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__AMapType*)p = *(ns1__AMapType*)q;
		break;
	case SOAP_TYPE__Anything__genericExecute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _Anything__genericExecute type=%d location=%p object=%p\n", t, p, q));
		*(_Anything__genericExecute*)p = *(_Anything__genericExecute*)q;
		break;
	case SOAP_TYPE__Anything__genericExecuteResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _Anything__genericExecuteResponse type=%d location=%p object=%p\n", t, p, q));
		*(_Anything__genericExecuteResponse*)p = *(_Anything__genericExecuteResponse*)q;
		break;
	case SOAP_TYPE_ArrayOfAMapType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ArrayOfAMapType type=%d location=%p object=%p\n", t, p, q));
		*(ArrayOfAMapType*)p = *(ArrayOfAMapType*)q;
		break;
	case SOAP_TYPE_ns1__MapType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__MapType type=%d location=%p object=%p\n", t, p, q));
		*(ns1__MapType*)p = *(ns1__MapType*)q;
		break;
	case SOAP_TYPE_ns1__Map:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy ns1__Map type=%d location=%p object=%p\n", t, p, q));
		*(ns1__Map*)p = *(ns1__Map*)q;
		break;
	case SOAP_TYPE___Anything__genericExecute:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __Anything__genericExecute type=%d location=%p object=%p\n", t, p, q));
		*(struct __Anything__genericExecute*)p = *(struct __Anything__genericExecute*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__AMapType_item::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__AMapType_item::key = NULL;
	this->_ns1__AMapType_item::value = NULL;
}

void _ns1__AMapType_item::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__anyType(soap, &this->_ns1__AMapType_item::key);
	soap_serialize_PointerToxsd__anyType(soap, &this->_ns1__AMapType_item::value);
#endif
}

int _ns1__AMapType_item::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AMapType_item(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AMapType_item(struct soap *soap, const char *tag, int id, const _ns1__AMapType_item *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AMapType_item), type))
		return soap->error;
	if (!a->_ns1__AMapType_item::key)
	{	if (soap_element_empty(soap, "key"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxsd__anyType(soap, "key", -1, &a->_ns1__AMapType_item::key, ""))
		return soap->error;
	if (!a->_ns1__AMapType_item::value)
	{	if (soap_element_empty(soap, "value"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxsd__anyType(soap, "value", -1, &a->_ns1__AMapType_item::value, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__AMapType_item::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AMapType_item(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AMapType_item * SOAP_FMAC4 soap_in__ns1__AMapType_item(struct soap *soap, const char *tag, _ns1__AMapType_item *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AMapType_item *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AMapType_item, sizeof(_ns1__AMapType_item), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__AMapType_item)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__AMapType_item *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_key1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__anyType(soap, "key", &a->_ns1__AMapType_item::key, "xsd:anyType"))
				{	soap_flag_key1--;
					continue;
				}
			}
			if (soap_flag_value1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__anyType(soap, "value", &a->_ns1__AMapType_item::value, "xsd:anyType"))
				{	soap_flag_value1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_ns1__AMapType_item::key || !a->_ns1__AMapType_item::value))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__AMapType_item *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AMapType_item, SOAP_TYPE__ns1__AMapType_item, sizeof(_ns1__AMapType_item), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__AMapType_item * SOAP_FMAC2 soap_instantiate__ns1__AMapType_item(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AMapType_item(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__AMapType_item *p;
	size_t k = sizeof(_ns1__AMapType_item);
	if (n < 0)
	{	p = SOAP_NEW(_ns1__AMapType_item);
	}
	else
	{	p = SOAP_NEW_ARRAY(_ns1__AMapType_item, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__AMapType_item location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__ns1__AMapType_item, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _ns1__AMapType_item::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__AMapType_item(soap, tag ? tag : "ns1:AMapType-item", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AMapType_item::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AMapType_item(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AMapType_item * SOAP_FMAC4 soap_get__ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AMapType_item(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _Anything__genericExecuteResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Anything__genericExecuteResponse::return_ = NULL;
	/* transient soap skipped */
}

void _Anything__genericExecuteResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToxsd__anyType(soap, &this->_Anything__genericExecuteResponse::return_);
#endif
}

int _Anything__genericExecuteResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Anything__genericExecuteResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Anything__genericExecuteResponse(struct soap *soap, const char *tag, int id, const _Anything__genericExecuteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__Anything__genericExecuteResponse), type))
		return soap->error;
	if (!a->_Anything__genericExecuteResponse::return_)
	{	if (soap_element_empty(soap, "return"))
			return soap->error;
	}
	else
	if (soap_out_PointerToxsd__anyType(soap, "return", -1, &a->_Anything__genericExecuteResponse::return_, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_Anything__genericExecuteResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Anything__genericExecuteResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Anything__genericExecuteResponse * SOAP_FMAC4 soap_in__Anything__genericExecuteResponse(struct soap *soap, const char *tag, _Anything__genericExecuteResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Anything__genericExecuteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__Anything__genericExecuteResponse, sizeof(_Anything__genericExecuteResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__Anything__genericExecuteResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_Anything__genericExecuteResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_return_1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_return_1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToxsd__anyType(soap, "return", &a->_Anything__genericExecuteResponse::return_, "xsd:anyType"))
				{	soap_flag_return_1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_Anything__genericExecuteResponse::return_))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_Anything__genericExecuteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__Anything__genericExecuteResponse, SOAP_TYPE__Anything__genericExecuteResponse, sizeof(_Anything__genericExecuteResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _Anything__genericExecuteResponse * SOAP_FMAC2 soap_instantiate__Anything__genericExecuteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Anything__genericExecuteResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_Anything__genericExecuteResponse *p;
	size_t k = sizeof(_Anything__genericExecuteResponse);
	if (n < 0)
	{	p = SOAP_NEW(_Anything__genericExecuteResponse);
		if (p)
			((_Anything__genericExecuteResponse*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_Anything__genericExecuteResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_Anything__genericExecuteResponse*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _Anything__genericExecuteResponse location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__Anything__genericExecuteResponse, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _Anything__genericExecuteResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__Anything__genericExecuteResponse(soap, tag ? tag : "Anything:genericExecuteResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Anything__genericExecuteResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Anything__genericExecuteResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Anything__genericExecuteResponse * SOAP_FMAC4 soap_get__Anything__genericExecuteResponse(struct soap *soap, _Anything__genericExecuteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Anything__genericExecuteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _Anything__genericExecute::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Anything__genericExecute::params = NULL;
	/* transient soap skipped */
}

void _Anything__genericExecute::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTons1__MapType(soap, &this->_Anything__genericExecute::params);
#endif
}

int _Anything__genericExecute::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Anything__genericExecute(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Anything__genericExecute(struct soap *soap, const char *tag, int id, const _Anything__genericExecute *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__Anything__genericExecute), type))
		return soap->error;
	if (!a->_Anything__genericExecute::params)
	{	if (soap_element_empty(soap, "params"))
			return soap->error;
	}
	else
	if (soap_out_PointerTons1__MapType(soap, "params", -1, &a->_Anything__genericExecute::params, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_Anything__genericExecute::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Anything__genericExecute(soap, tag, this, type);
}

SOAP_FMAC3 _Anything__genericExecute * SOAP_FMAC4 soap_in__Anything__genericExecute(struct soap *soap, const char *tag, _Anything__genericExecute *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Anything__genericExecute *)soap_id_enter(soap, soap->id, a, SOAP_TYPE__Anything__genericExecute, sizeof(_Anything__genericExecute), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__Anything__genericExecute)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_Anything__genericExecute *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_params1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_params1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTons1__MapType(soap, "params", &a->_Anything__genericExecute::params, "ns1:MapType"))
				{	soap_flag_params1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_Anything__genericExecute::params))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_Anything__genericExecute *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__Anything__genericExecute, SOAP_TYPE__Anything__genericExecute, sizeof(_Anything__genericExecute), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _Anything__genericExecute * SOAP_FMAC2 soap_instantiate__Anything__genericExecute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Anything__genericExecute(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_Anything__genericExecute *p;
	size_t k = sizeof(_Anything__genericExecute);
	if (n < 0)
	{	p = SOAP_NEW(_Anything__genericExecute);
		if (p)
			((_Anything__genericExecute*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(_Anything__genericExecute, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((_Anything__genericExecute*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _Anything__genericExecute location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE__Anything__genericExecute, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int _Anything__genericExecute::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__Anything__genericExecute(soap, tag ? tag : "Anything:genericExecute", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Anything__genericExecute::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Anything__genericExecute(soap, this, tag, type);
}

SOAP_FMAC3 _Anything__genericExecute * SOAP_FMAC4 soap_get__Anything__genericExecute(struct soap *soap, _Anything__genericExecute *p, const char *tag, const char *type)
{
	if ((p = soap_in__Anything__genericExecute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__Map::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__MapType::soap_default(soap);
}

void ns1__Map::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->ns1__MapType::soap_serialize(soap);
#endif
}

int ns1__Map::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__Map(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Map(struct soap *soap, const char *tag, int id, const ns1__Map *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__Map), type ? type : "ns1:Map"))
		return soap->error;
	if (a->ns1__AMapType::item)
	{	int i;
		for (i = 0; i < (int)a->ns1__AMapType::__sizeitem; i++)
			if (a->ns1__AMapType::item[i].soap_out(soap, "item", -1, ""))
				return soap->error;
	}
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__Map::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__Map(soap, tag, this, type);
}

SOAP_FMAC3 ns1__Map * SOAP_FMAC4 soap_in_ns1__Map(struct soap *soap, const char *tag, ns1__Map *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__Map *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__Map, sizeof(ns1__Map), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__Map)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__Map *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item4 = 1;
	struct soap_blist *soap_blist_item3 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->ns1__AMapType::item == NULL)
				{	if (soap_blist_item3 == NULL)
						soap_blist_item3 = soap_alloc_block(soap);
					a->ns1__AMapType::item = soap_block<_ns1__AMapType_item>::push(soap, soap_blist_item3);
					if (a->ns1__AMapType::item == NULL)
						return NULL;
					a->ns1__AMapType::item->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__ns1__AMapType_item(soap, "item", a->ns1__AMapType::item, ""))
				{	a->ns1__AMapType::__sizeitem++;
					a->ns1__AMapType::item = NULL;
					continue;
				}
			}
			if (soap_flag___item4 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item4--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__AMapType::item)
			soap_block<_ns1__AMapType_item>::pop(soap, soap_blist_item3);
		if (a->ns1__AMapType::__sizeitem)
		{	a->ns1__AMapType::item = soap_new__ns1__AMapType_item(soap, a->ns1__AMapType::__sizeitem);
			if (!a->ns1__AMapType::item)
				return NULL;
			soap_block<_ns1__AMapType_item>::save(soap, soap_blist_item3, a->ns1__AMapType::item);
		}
		else
		{	a->ns1__AMapType::item = NULL;
			if (soap_blist_item3)
				soap_block<_ns1__AMapType_item>::end(soap, soap_blist_item3);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__Map *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__Map, SOAP_TYPE_ns1__Map, sizeof(ns1__Map), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__Map * SOAP_FMAC2 soap_instantiate_ns1__Map(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__Map(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ns1__Map *p;
	size_t k = sizeof(ns1__Map);
	if (n < 0)
	{	p = SOAP_NEW(ns1__Map);
		if (p)
			((ns1__Map*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__Map, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__Map*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__Map location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__Map, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__Map::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__Map(soap, tag ? tag : "ns1:Map", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__Map::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__Map(soap, this, tag, type);
}

SOAP_FMAC3 ns1__Map * SOAP_FMAC4 soap_get_ns1__Map(struct soap *soap, ns1__Map *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__Map(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__MapType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__AMapType::soap_default(soap);
}

void ns1__MapType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->ns1__AMapType::soap_serialize(soap);
#endif
}

int ns1__MapType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__MapType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__MapType(struct soap *soap, const char *tag, int id, const ns1__MapType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__MapType), type ? type : "ns1:MapType"))
		return soap->error;
	if (a->ns1__AMapType::item)
	{	int i;
		for (i = 0; i < (int)a->ns1__AMapType::__sizeitem; i++)
			if (a->ns1__AMapType::item[i].soap_out(soap, "item", -1, ""))
				return soap->error;
	}
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__MapType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__MapType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__MapType * SOAP_FMAC4 soap_in_ns1__MapType(struct soap *soap, const char *tag, ns1__MapType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__MapType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__MapType, sizeof(ns1__MapType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__MapType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__MapType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item3 = 1;
	struct soap_blist *soap_blist_item2 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->ns1__AMapType::item == NULL)
				{	if (soap_blist_item2 == NULL)
						soap_blist_item2 = soap_alloc_block(soap);
					a->ns1__AMapType::item = soap_block<_ns1__AMapType_item>::push(soap, soap_blist_item2);
					if (a->ns1__AMapType::item == NULL)
						return NULL;
					a->ns1__AMapType::item->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__ns1__AMapType_item(soap, "item", a->ns1__AMapType::item, ""))
				{	a->ns1__AMapType::__sizeitem++;
					a->ns1__AMapType::item = NULL;
					continue;
				}
			}
			if (soap_flag___item3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item3--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__AMapType::item)
			soap_block<_ns1__AMapType_item>::pop(soap, soap_blist_item2);
		if (a->ns1__AMapType::__sizeitem)
		{	a->ns1__AMapType::item = soap_new__ns1__AMapType_item(soap, a->ns1__AMapType::__sizeitem);
			if (!a->ns1__AMapType::item)
				return NULL;
			soap_block<_ns1__AMapType_item>::save(soap, soap_blist_item2, a->ns1__AMapType::item);
		}
		else
		{	a->ns1__AMapType::item = NULL;
			if (soap_blist_item2)
				soap_block<_ns1__AMapType_item>::end(soap, soap_blist_item2);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__MapType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__MapType, SOAP_TYPE_ns1__MapType, sizeof(ns1__MapType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__MapType * SOAP_FMAC2 soap_instantiate_ns1__MapType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__MapType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:Map"))
		return soap_instantiate_ns1__Map(soap, n, NULL, NULL, size);
	ns1__MapType *p;
	size_t k = sizeof(ns1__MapType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__MapType);
		if (p)
			((ns1__MapType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__MapType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__MapType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__MapType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__MapType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__MapType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__MapType(soap, tag ? tag : "ns1:MapType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__MapType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__MapType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__MapType * SOAP_FMAC4 soap_get_ns1__MapType(struct soap *soap, ns1__MapType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__MapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ArrayOfAMapType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__ptritem = NULL;
	this->__size = 0;
}

void ArrayOfAMapType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptritem && !soap_array_reference(soap, this, this->__ptritem, this->__size, SOAP_TYPE_ArrayOfAMapType))
	{	for (size_t i = 0; i < (size_t)this->__size; i++)
		{
			soap_serialize_PointerTons1__AMapType(soap, this->__ptritem + i);
		}
	}
#endif
}

int ArrayOfAMapType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_ArrayOfAMapType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ArrayOfAMapType(struct soap *soap, const char *tag, int id, const ArrayOfAMapType *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptritem ? soap_putsizesoffsets(soap, "ns1:AMapType", &a->__size, NULL, 1) : NULL;
	id = soap_element_id(soap, tag, id, a, a->__ptritem, a->__size, type, SOAP_TYPE_ArrayOfAMapType, NULL);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_PointerTons1__AMapType(soap, "item", -1, &a->__ptritem[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *ArrayOfAMapType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ArrayOfAMapType(soap, tag, this, type);
}

SOAP_FMAC3 ArrayOfAMapType * SOAP_FMAC4 soap_in_ArrayOfAMapType(struct soap *soap, const char *tag, ArrayOfAMapType *a, const char *type)
{	int i, j;
	ns1__AMapType **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (ArrayOfAMapType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ArrayOfAMapType, sizeof(ArrayOfAMapType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		if (*soap->arraySize)
		{
			soap_getsizes(soap->arraySize, &a->__size, 1);
			a->__size -= j = soap_getoffsets(soap->arrayOffset, &a->__size, NULL, 1);
			if ((size_t)a->__size > soap->maxoccurs)
			{	soap->error = SOAP_OCCURS;
				return NULL;
			}
			a->__ptritem = (ns1__AMapType **)soap_malloc(soap, sizeof(ns1__AMapType *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptritem[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_PointerTons1__AMapType(soap, NULL, a->__ptritem + i, "ns1:AMapType"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_alloc_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (ns1__AMapType **)soap_push_block(soap, NULL, sizeof(ns1__AMapType *));
				if (!p)
					break;
				*p = NULL;
				if (!soap_in_PointerTons1__AMapType(soap, NULL, p, "ns1:AMapType"))
				{	if (soap->error == SOAP_NO_TAG)
						soap->error = SOAP_OK;
					soap_pop_block(soap, NULL);
					break;
				}
				if ((size_t)a->__size > soap->maxoccurs)
				{	soap->error = SOAP_OCCURS;
					return NULL;
				}
			}
			a->__ptritem = (ns1__AMapType **)soap_save_block(soap, NULL, NULL, 1);
		}
		if (soap->error || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ArrayOfAMapType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ArrayOfAMapType, SOAP_TYPE_ArrayOfAMapType, sizeof(ArrayOfAMapType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ArrayOfAMapType * SOAP_FMAC2 soap_instantiate_ArrayOfAMapType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ArrayOfAMapType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	ArrayOfAMapType *p;
	size_t k = sizeof(ArrayOfAMapType);
	if (n < 0)
	{	p = SOAP_NEW(ArrayOfAMapType);
		if (p)
			((ArrayOfAMapType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ArrayOfAMapType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ArrayOfAMapType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ArrayOfAMapType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ArrayOfAMapType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ArrayOfAMapType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ArrayOfAMapType(soap, tag ? tag : "SOAP-ENC:Array", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ArrayOfAMapType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ArrayOfAMapType(soap, this, tag, type);
}

SOAP_FMAC3 ArrayOfAMapType * SOAP_FMAC4 soap_get_ArrayOfAMapType(struct soap *soap, ArrayOfAMapType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ArrayOfAMapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns1__AMapType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->ns1__AMapType::__sizeitem = 0;
	this->ns1__AMapType::item = NULL;
}

void ns1__AMapType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->ns1__AMapType::item)
	{	int i;
		for (i = 0; i < (int)this->ns1__AMapType::__sizeitem; i++)
		{
			soap_embedded(soap, this->ns1__AMapType::item + i, SOAP_TYPE__ns1__AMapType_item);
			this->ns1__AMapType::item[i].soap_serialize(soap);
		}
	}
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int ns1__AMapType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AMapType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AMapType(struct soap *soap, const char *tag, int id, const ns1__AMapType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AMapType), type ? type : "ns1:AMapType"))
		return soap->error;
	if (a->ns1__AMapType::item)
	{	int i;
		for (i = 0; i < (int)a->ns1__AMapType::__sizeitem; i++)
			if (a->ns1__AMapType::item[i].soap_out(soap, "item", -1, ""))
				return soap->error;
	}
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns1__AMapType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AMapType(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AMapType * SOAP_FMAC4 soap_in_ns1__AMapType(struct soap *soap, const char *tag, ns1__AMapType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AMapType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AMapType, sizeof(ns1__AMapType), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_ns1__AMapType)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (ns1__AMapType *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->ns1__AMapType::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_alloc_block(soap);
					a->ns1__AMapType::item = soap_block<_ns1__AMapType_item>::push(soap, soap_blist_item1);
					if (a->ns1__AMapType::item == NULL)
						return NULL;
					a->ns1__AMapType::item->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in__ns1__AMapType_item(soap, "item", a->ns1__AMapType::item, ""))
				{	a->ns1__AMapType::__sizeitem++;
					a->ns1__AMapType::item = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns1__AMapType::item)
			soap_block<_ns1__AMapType_item>::pop(soap, soap_blist_item1);
		if (a->ns1__AMapType::__sizeitem)
		{	a->ns1__AMapType::item = soap_new__ns1__AMapType_item(soap, a->ns1__AMapType::__sizeitem);
			if (!a->ns1__AMapType::item)
				return NULL;
			soap_block<_ns1__AMapType_item>::save(soap, soap_blist_item1, a->ns1__AMapType::item);
		}
		else
		{	a->ns1__AMapType::item = NULL;
			if (soap_blist_item1)
				soap_block<_ns1__AMapType_item>::end(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AMapType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AMapType, SOAP_TYPE_ns1__AMapType, sizeof(ns1__AMapType), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 ns1__AMapType * SOAP_FMAC2 soap_instantiate_ns1__AMapType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AMapType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:MapType"))
		return soap_instantiate_ns1__MapType(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:Map"))
		return soap_instantiate_ns1__Map(soap, n, NULL, NULL, size);
	ns1__AMapType *p;
	size_t k = sizeof(ns1__AMapType);
	if (n < 0)
	{	p = SOAP_NEW(ns1__AMapType);
		if (p)
			((ns1__AMapType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(ns1__AMapType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((ns1__AMapType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated ns1__AMapType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_ns1__AMapType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int ns1__AMapType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_ns1__AMapType(soap, tag ? tag : "ns1:AMapType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns1__AMapType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AMapType(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AMapType * SOAP_FMAC4 soap_get_ns1__AMapType(struct soap *soap, ns1__AMapType *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AMapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType, soap_instantiate, soap_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_xsd__anyType)
		return (xsd__anyType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "ns1:AMapType"))
		return soap_instantiate_ns1__AMapType(soap, n, NULL, NULL, size);
	if (soap && arrayType && !soap_match_tag(soap, arrayType, "ns1:AMapType"))
		return soap_instantiate_ArrayOfAMapType(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:MapType"))
		return soap_instantiate_ns1__MapType(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "ns1:Map"))
		return soap_instantiate_ns1__Map(soap, n, NULL, NULL, size);
	xsd__anyType *p;
	size_t k = sizeof(xsd__anyType);
	if (n < 0)
	{	p = SOAP_NEW(xsd__anyType);
		if (p)
			((xsd__anyType*)p)->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(xsd__anyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				((xsd__anyType*)p)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyType location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyType(soap, tag ? tag : "xsd:anyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	if (n < 0)
	{	p = SOAP_NEW(struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Anything__genericExecute(struct soap *soap, struct __Anything__genericExecute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Anything__genericExecute = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Anything__genericExecute(struct soap *soap, const struct __Anything__genericExecute *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_Anything__genericExecute(soap, &a->Anything__genericExecute);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Anything__genericExecute(struct soap *soap, const char *tag, int id, const struct __Anything__genericExecute *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_Anything__genericExecute(soap, "Anything:genericExecute", -1, &a->Anything__genericExecute, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Anything__genericExecute * SOAP_FMAC4 soap_in___Anything__genericExecute(struct soap *soap, const char *tag, struct __Anything__genericExecute *a, const char *type)
{
	size_t soap_flag_Anything__genericExecute = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __Anything__genericExecute *)soap_id_enter(soap, "", a, SOAP_TYPE___Anything__genericExecute, sizeof(struct __Anything__genericExecute), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Anything__genericExecute(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Anything__genericExecute && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_Anything__genericExecute(soap, "Anything:genericExecute", &a->Anything__genericExecute, ""))
				{	soap_flag_Anything__genericExecute--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __Anything__genericExecute * SOAP_FMAC2 soap_instantiate___Anything__genericExecute(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Anything__genericExecute(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __Anything__genericExecute *p;
	size_t k = sizeof(struct __Anything__genericExecute);
	if (n < 0)
	{	p = SOAP_NEW(struct __Anything__genericExecute);
	}
	else
	{	p = SOAP_NEW_ARRAY(struct __Anything__genericExecute, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __Anything__genericExecute location=%p n=%d\n", (void*)p, n));
	soap_link(soap, p, SOAP_TYPE___Anything__genericExecute, n, soap_fdelete);
	if (size)
		*size = k;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Anything__genericExecute(struct soap *soap, const struct __Anything__genericExecute *a, const char *tag, const char *type)
{
	if (soap_out___Anything__genericExecute(soap, tag ? tag : "-Anything:genericExecute", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Anything__genericExecute * SOAP_FMAC4 soap_get___Anything__genericExecute(struct soap *soap, struct __Anything__genericExecute *p, const char *tag, const char *type)
{
	if ((p = soap_in___Anything__genericExecute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Anything__genericExecute(struct soap *soap, _Anything__genericExecute *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__Anything__genericExecute))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Anything__genericExecute(struct soap *soap, const char *tag, int id, _Anything__genericExecute *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__Anything__genericExecute, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__Anything__genericExecute ? type : NULL);
}

SOAP_FMAC3 _Anything__genericExecute ** SOAP_FMAC4 soap_in_PointerTo_Anything__genericExecute(struct soap *soap, const char *tag, _Anything__genericExecute **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Anything__genericExecute **)soap_malloc(soap, sizeof(_Anything__genericExecute *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Anything__genericExecute *)soap_instantiate__Anything__genericExecute(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_Anything__genericExecute **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__Anything__genericExecute, sizeof(_Anything__genericExecute), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Anything__genericExecute(struct soap *soap, _Anything__genericExecute *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_Anything__genericExecute(soap, tag ? tag : "Anything:genericExecute", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Anything__genericExecute ** SOAP_FMAC4 soap_get_PointerTo_Anything__genericExecute(struct soap *soap, _Anything__genericExecute **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Anything__genericExecute(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AMapType(struct soap *soap, ns1__AMapType **const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__AMapType))
		soap_serialize_PointerTons1__AMapType(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AMapType(struct soap *soap, const char *tag, int id, ns1__AMapType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__AMapType, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__AMapType(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__AMapType *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AMapType(struct soap *soap, const char *tag, ns1__AMapType ***a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AMapType ***)soap_malloc(soap, sizeof(ns1__AMapType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__AMapType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__AMapType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AMapType, sizeof(ns1__AMapType), 1, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AMapType(struct soap *soap, ns1__AMapType **const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToPointerTons1__AMapType(soap, tag ? tag : "ns1:AMapType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__AMapType *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AMapType(struct soap *soap, ns1__AMapType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__AMapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AMapType(struct soap *soap, ns1__AMapType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AMapType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AMapType(struct soap *soap, const char *tag, int id, ns1__AMapType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AMapType, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__AMapType ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__AMapType ** SOAP_FMAC4 soap_in_PointerTons1__AMapType(struct soap *soap, const char *tag, ns1__AMapType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AMapType **)soap_malloc(soap, sizeof(ns1__AMapType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AMapType *)soap_instantiate_ns1__AMapType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__AMapType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AMapType, sizeof(ns1__AMapType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AMapType(struct soap *soap, ns1__AMapType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__AMapType(soap, tag ? tag : "ns1:AMapType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__AMapType ** SOAP_FMAC4 soap_get_PointerTons1__AMapType(struct soap *soap, ns1__AMapType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AMapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__MapType(struct soap *soap, ns1__MapType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__MapType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__MapType(struct soap *soap, const char *tag, int id, ns1__MapType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__MapType, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_ns1__MapType ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 ns1__MapType ** SOAP_FMAC4 soap_in_PointerTons1__MapType(struct soap *soap, const char *tag, ns1__MapType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__MapType **)soap_malloc(soap, sizeof(ns1__MapType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__MapType *)soap_instantiate_ns1__MapType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (ns1__MapType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__MapType, sizeof(ns1__MapType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__MapType(struct soap *soap, ns1__MapType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTons1__MapType(soap, tag ? tag : "ns1:MapType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns1__MapType ** SOAP_FMAC4 soap_get_PointerTons1__MapType(struct soap *soap, ns1__MapType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__MapType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AMapType_item))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AMapType_item(struct soap *soap, const char *tag, int id, _ns1__AMapType_item *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AMapType_item, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__AMapType_item ? type : NULL);
}

SOAP_FMAC3 _ns1__AMapType_item ** SOAP_FMAC4 soap_in_PointerTo_ns1__AMapType_item(struct soap *soap, const char *tag, _ns1__AMapType_item **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AMapType_item **)soap_malloc(soap, sizeof(_ns1__AMapType_item *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AMapType_item *)soap_instantiate__ns1__AMapType_item(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__AMapType_item **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AMapType_item, sizeof(_ns1__AMapType_item), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__AMapType_item(soap, tag ? tag : "ns1:AMapType-item", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AMapType_item ** SOAP_FMAC4 soap_get_PointerTo_ns1__AMapType_item(struct soap *soap, _ns1__AMapType_item **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AMapType_item(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_xsd__anyType))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyType(struct soap *soap, const char *tag, int id, xsd__anyType *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__anyType, &mark);
	if (id < 0)
		return soap->error;
	(*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_xsd__anyType ? type : NULL);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_in_PointerToxsd__anyType(struct soap *soap, const char *tag, xsd__anyType **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__anyType **)soap_malloc(soap, sizeof(xsd__anyType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__anyType *)soap_instantiate_xsd__anyType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (xsd__anyType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyType(struct soap *soap, xsd__anyType *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToxsd__anyType(soap, tag ? tag : "xsd:anyType", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__anyType ** SOAP_FMAC4 soap_get_PointerToxsd__anyType(struct soap *soap, xsd__anyType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
